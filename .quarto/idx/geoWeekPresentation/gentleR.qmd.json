{"title":"Gentle introduction to `R`","markdown":{"yaml":{"title":"Gentle introduction to `R`","title-slide-attributes":{"data-background-image":"stan_state_screen_5.png","data-background-opacity":"0.3"},"author":"Esteban Montenegro-Montenegro, PhD","institute":"Department of Psychology and Child Development","format":{"revealjs":{"footer":"[**Visit my website**](https://blackhill86.github.io/mm2/)","theme":["moon","customTheme.sass"],"header-logo":"warrior_head2.png","slide-number":true,"self-contained":false,"preview-links":true,"chalkboard":{"theme":"whiteboard"}}},"filters":["reveal-header"],"highlight-style":"dracula","code-block-bg":true,"code-block-border-left":"#A41728","from":"markdown+emoji","editor":"visual","logo":"stan-state-logo_nickname-full-color.png"},"headingText":"What is [R]{.blue}?","containsRefs":false,"markdown":"\n\n\n`R` is a programming language mostly used in statistics. It was created by statisticians.\n\nR was inspired by the statistical language `S` developed by At&T. `S` stands for \"statistics\" and it was written based on `C` language. After `S` was sold to a small company, `S`-plus was created with a graphical interface.\n\n## What is [R]{.blue} (II)?\n\n-   `R` was considered a \"statistics\" language, but nowadays it can perform more tasks. We will see examples where you can create a website, create a dashboard, create a teaching notebook, and presentation slides!\n\n-   `R` also provides multiple options to create graphics and plots. The options are infinite when you use a programming language.\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: r-stack\n![](rgrowth.png){.fragment width=\"600\" height=\"400\"}\n\n![](rarea.png){.fragment width=\"444\" height=\"444\"}\n\n![](rtiobe.png){.fragment width=\"444\" height=\"444\"}\n:::\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n[![TIOBE index of R overtime](rtiobe2.png)](https://www.tiobe.com/tiobe-index/r/)\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: columns\n::: {.column width=\"70%\"}\n::: fragment\n-   `R` is free and open-source software. `R` is available as Free Software under the terms of the Free Software Foundation's GNU General Public License.\n:::\n\n::: {.fragment .fade-up}\n-   The amount of users grow every second.\n:::\n\n::: {.fragment .fade-up}\n-   It is friendly with non-programmers (You don't believe me I know...).\n:::\n\n::: {.fragment .fade-up}\n-   The amount of packages is growing (19985 packages as today).\n:::\n\n::: {.fragment .fade-up}\n-   You don't depend on buying a license.\n:::\n\n::: {.fragment .fade-up}\n-   You can see what is under the hood.\n:::\n\n::: {.fragment .fade-up}\n-   There are many jobs where `R` skills are needed.\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](tea_2.jpg)\n\n::: {.fragment .fade-up}\n-   You'll have access to cutting-edge quantitative methods and models.\n:::\n\n::: {.callout-important title=\"More info\" appearance=\"simple\" collapse=\"true\"}\nSee [datacamp.com](https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022){target=\"_blank\"} opinion.\n:::\n:::\n:::\n\n# How `R` works? {.center .sectionhead}\n\n## \n\n-   `R` is an interpreted language, that means you don't need to compile the code. You will need to use a command-line interpreter.\n\n-   It is an [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming){target=\"_blank\"} programming language. It represents the information using virtual objects.\n\n![](fancy.jpg){fig-align=\"right\" width=\"300\"}\n\n## Packages are the key {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   `R` has several built-in functions but they are not enough to answer all the possible research questions a researcher will have.\n\n-   `R` users support their data analysis using [packages]{.blue} that other members of the community developed.\n\n-   These packages are actually software and they can be installed very easily in `R`. You don't have to program anything, there are 19 985 packages as today. But of course, you might need to program some routines if your problem is very specific.\n\n-   The packages are all located in a large repository call [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/web/packages/available_packages_by_name.html){target=\"_blank\"}\n\n# Let's jump into `R` {.center .sectionhead}\n\n## Editors and IDE {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Most famous IDE (Integrated Development Environment):\n    -   [RStudio](https://posit.co/download/rstudio-desktop/){target=\"_blank\"}\n    -   [Visual Studio Code](https://code.visualstudio.com/download)\n-   Not so famous but still powerful and [full open source:]{.blue}\n    -   [EMACS](https://www.gnu.org/software/emacs/download.html){target=\"_blank\"}\n    -   [VIM](https://www.vim.org/download.php){target=\"_blank\"}\n\n# Everything is an object, everything is a function {.center .sectionhead}\n\n## Types of objects {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Objects in `R` have properties and names, similar to real objects:\n    -   vectors\n    -   data frame\n    -   lists\n    -   arrays\n    -   functions\n-   These are just the most common objects in `R`. I'll explain a little bit of each one.\n\n## Vectors {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   It is the most basic object, it is the bones of `R`.\n\n-   In human language, they look like lists of elements. But, when mixed different type of data (letters mixed with numbers) things get messy:\n\n```{r, echo= TRUE}\n### Let's create a vector with names:\n\nrandomNames <- c(\"Randall\", \"Pablo\", \"Emma\")\n\nprint(randomNames) #You don't need to type print. This is for teaching purposes. \n```\n\nLet's see what happen's when I mix numbers and letters:\n\n```{r, echo= TRUE}\n\nnumbersNames <- c(\"one\",1, 2, \"two\", 3, \"three\")\nprint(numbersNames)\n```\n\n`R` coerces everything to be a string or character vector.\n\n-   You may also subset a vector by using `[]` as an index indicator\n\n```{r, echo=TRUE}\nnumbersNames[4]\n```\n\n## Data frames {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Data frame is the most useful type of object when you conduct data analysis.\n\n-   A data frame is several lists combined together, and it looks pretty much like a matrix or a spreadsheet:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nmtcars\n```\n\n##  {.smaller .scrollable background-opacity=\"0.5\"}\n\nLet's beautify the data frame output:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(DT)\ndatatable(mtcars,\n          rownames = TRUE) \n```\n\n## Lists {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Lists are flexible and easy to manipulate in `R`. You can combine different types of objects in a single list:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n### Let's create different types of objects\n\n### Data frame\n\ndata_1 <- data.frame(v1= rnorm(8),\n                     v2 = rnorm(8),\n                     v3 = rnorm(8))\n\n### Vector\n\nmoreNames <- c(\"Bob\", \"Paris\", \"Ana\")\n\n### Numeric vector\n\nnumericVector <- c(1,3,78,90)\n\n### We can group all these objects in a list\n\nlistOfObjects <- list(data_1,\n                      moreNames,\n                      numericVector)\nprint(listOfObjects)\n```\n\nIf you need to access one object in the list you may use its location plus `[[]]`:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nlistOfObjects[[2]]\n```\n\n## Arrays {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   I don't use arrays in my code, but they are common in in `R` and other languages.\n\n-   An arrays is a multidimensional object, you can have multiple \"slices\" of information in on single object.\n\n-   It is similar to a multi-layer object.\n\n```{r, echo=TRUE}\narray(c(matrix(1:4,2,2)), dim=c(2,2,3))\n```\n\n## Functions {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   A function is a data object that requires input information, in return; it will give an output.\n\n-   I have already used several functions (e.g. `data.frame()`, `rnorm()`).\n\n-   Functions will always follow the following structure:\n\n```{r, echo=TRUE,eval=FALSE}\n\nmyFunction <- function(argument1, argument2, ...){ \n  \n  operation\n  \n  return()\n  \n  }\n\n```\n\n-   We can study the following case, where I created a function to estimate your age:\n\n```{r, echo=TRUE, eval=TRUE, include=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nestimateAge <- function(myBirthday) {\n  ### Function to check if year is a\n  ### leap year.\n  \n  leapyear <- function(year) {\n    return(((year %% 4 == 0) & (year %% 100 != 0)) | (year %% 400 == 0))\n  }\n  \n  ### Information necessary to compute age\n  myBirthday2 <- as.Date(myBirthday)\n  today <- Sys.Date()\n  year <- as.numeric(format(myBirthday2, \"%Y\"))\n  leapCheck <- leapyear(year)\n  \n  \n  if (leapCheck == TRUE) {\n    ## leap year\n    age <- difftime(today,\n                    myBirthday2 ,\n                    units = \"days\") / (365 + 1)\n    \n  } else {\n    ## No leap year\n    age <- difftime(today,\n                    myBirthday2,\n                    units = \"days\") / 365\n    \n  }\n  \n  message(\"Your age is\",\" \", age)\n}\n```\n\n-   My function `estimateAge()` requires only one argument `myBirthday`, that argument is passed to the computation inside the function to estimate the age.\n\n```{r, echo=TRUE, eval=TRUE, include=TRUE, message=TRUE}\n## Let's enter my date of birth\nestimateAge(\"1986-01-28\") \n```\n\n-   But don't worry, you don't have to compute age like I did. There is already a package that has all the tools to manipulate dates. It is the package `lubridate`.\n\n# More applications beyond statistics {.center .sectionhead}\n\n## ShinyApps {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   [Watch Crime](https://shiny.posit.co/r/gallery/government-public-sector/crime-watch/){target=\"_blank\"}\n\n-   [Water quality dashboard](https://shiny.posit.co/r/gallery/government-public-sector/lake-profile-dashboard/){target=\"_blank\"}\n\n-   [Interactive data visualization](https://shiny.posit.co/r/gallery/interactive-visualizations/movie-explorer/){target=\"_blank\"}\n\n-   [Super Zips](https://shiny.posit.co/r/gallery/interactive-visualizations/superzip-example/){target=\"_blank\"}\n\n## Web Pages {.smaller .scrollable background-opacity=\"0.5\"}\n\n[- Andrew Heiss](https://www.andrewheiss.com/){target=\"_blank\"}\n\n[- Quantum Jitter](https://www.quantumjitter.com/project/){target=\"_blank\"}\n\n[- Ella Kaye](https://ellakaye.co.uk/){target=\"_blank\"}\n\n[- Books](https://r-pkgs.org/){target=\"_blank\"}\n\n[- University Course](https://lse-dsi.github.io/DS101/){target=\"_blank\"}\n\n## Scientific articles and reports in pdf {.smaller .scrollable background-opacity=\"0.5\"}\n\n[- Article](https://cmarquardt.github.io/quarto-simple-article/){target=\"_blank\"}\n\n[- Report](https://github.com/numbats/monash-quarto-report/blob/main/examples/template.pdf){target=\"_blank\"}\n\n## We can also add `R` code and run it in our websites\n\n<iframe src=\"https://blackhill86.github.io/mm2/practice2/practice2.html#practice2\" width=\"75%\" height=\"75%\" frameborder=\"0\" scrolling=\"yes\">\n\n</iframe>\n\n# We can paint happy plots in `R` {.center .sectionhead}\n\n![](bobross.jpg){fig-align=\"center\" width=\"350\"}\n\n## Happy penguins {.smaller .scrollable background-opacity=\"0.5\"}\n\n```{r, warning=FALSE, message=FALSE, error=FALSE, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n### The rule is to write the packages required by your code at the beginning\n## Packages loaded or called\nlibrary(jpeg)             ## reads pictures into R\nlibrary(patchwork)         ## more tools to add features in a plot\nlibrary(ggplot2)          ## creates plots\nlibrary(palmerpenguins)  ## This package has the penguin data\n\npicture <- \"penguins.jpg\"\nimg <- readJPEG(picture, native = TRUE)\n\n### Plotting the data using ggplot2\n\nggplot(penguins, aes(x = flipper_length_mm, \n                     y= body_mass_g,\n                     color = species)) +\n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\" ) + \n  theme_classic() +  \n  xlab(\"Flipper Length in milimeters\")+\n  ylab(\"Body Mass in grams\")+\n  inset_element(p = img,\n                left = 0.05,\n                bottom = 0.65,\n                right = 0.5,\n                top = 0.95)\n```\n\n## You can create art {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: columns\n::: {.column width=\"40%\"}\n[Danielle Navarro's blog](https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/){target=\"_blank\"}\n:::\n\n::: {.column width=\"60%\"}\n[Basics on generative art](https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/){target=\"_blank\"}\n:::\n:::\n\n![](flametree.png){fig-align=\"center\"}\n\n```{=html}\n<!--# Add model summary: https://modelsummary.com/. Also add  https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/\nAnd generative art\nAdd anput packages and CRAN\n-->\n```\n## GIS and spatial data {.smaller .scrollable background-opacity=\"0.5\"}\n\n![](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/index_files/figure-html/numenor-map-correct-1.png){.absolute top=\"200\" left=\"10f\" width=\"500\" height=\"500\"}\n\n![](ring2.jpg){.absolute top=\"200\" right=\"0\" width=\"200\" height=\"200\"}\n\n[Making Middle Earth maps with R](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/){target=\"_blank\"}\n\n# Remember...\n\n[![](programmers-credo.jpg)](https://www.globalnerdy.com/2021/06/07/the-programmers-credo/)\n\n# Thank you for you attention! {.center .sectionhead}\n\n[[{{< fa brands mastodon >}}](https://fediscience.org/@montenegro)]{.blue} Follow me on Mastodon.\n\n{{< fa solid envelope beat >}} <a href=\"mailto:emontenegro1@csustan.edu\">emontenegro1\\@csustan.edu</a>\n","srcMarkdownNoYaml":"\n\n## What is [R]{.blue}?\n\n`R` is a programming language mostly used in statistics. It was created by statisticians.\n\nR was inspired by the statistical language `S` developed by At&T. `S` stands for \"statistics\" and it was written based on `C` language. After `S` was sold to a small company, `S`-plus was created with a graphical interface.\n\n## What is [R]{.blue} (II)?\n\n-   `R` was considered a \"statistics\" language, but nowadays it can perform more tasks. We will see examples where you can create a website, create a dashboard, create a teaching notebook, and presentation slides!\n\n-   `R` also provides multiple options to create graphics and plots. The options are infinite when you use a programming language.\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: r-stack\n![](rgrowth.png){.fragment width=\"600\" height=\"400\"}\n\n![](rarea.png){.fragment width=\"444\" height=\"444\"}\n\n![](rtiobe.png){.fragment width=\"444\" height=\"444\"}\n:::\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n[![TIOBE index of R overtime](rtiobe2.png)](https://www.tiobe.com/tiobe-index/r/)\n\n## Why should we use `R`? {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: columns\n::: {.column width=\"70%\"}\n::: fragment\n-   `R` is free and open-source software. `R` is available as Free Software under the terms of the Free Software Foundation's GNU General Public License.\n:::\n\n::: {.fragment .fade-up}\n-   The amount of users grow every second.\n:::\n\n::: {.fragment .fade-up}\n-   It is friendly with non-programmers (You don't believe me I know...).\n:::\n\n::: {.fragment .fade-up}\n-   The amount of packages is growing (19985 packages as today).\n:::\n\n::: {.fragment .fade-up}\n-   You don't depend on buying a license.\n:::\n\n::: {.fragment .fade-up}\n-   You can see what is under the hood.\n:::\n\n::: {.fragment .fade-up}\n-   There are many jobs where `R` skills are needed.\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](tea_2.jpg)\n\n::: {.fragment .fade-up}\n-   You'll have access to cutting-edge quantitative methods and models.\n:::\n\n::: {.callout-important title=\"More info\" appearance=\"simple\" collapse=\"true\"}\nSee [datacamp.com](https://www.datacamp.com/blog/top-programming-languages-for-data-scientists-in-2022){target=\"_blank\"} opinion.\n:::\n:::\n:::\n\n# How `R` works? {.center .sectionhead}\n\n## \n\n-   `R` is an interpreted language, that means you don't need to compile the code. You will need to use a command-line interpreter.\n\n-   It is an [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming){target=\"_blank\"} programming language. It represents the information using virtual objects.\n\n![](fancy.jpg){fig-align=\"right\" width=\"300\"}\n\n## Packages are the key {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   `R` has several built-in functions but they are not enough to answer all the possible research questions a researcher will have.\n\n-   `R` users support their data analysis using [packages]{.blue} that other members of the community developed.\n\n-   These packages are actually software and they can be installed very easily in `R`. You don't have to program anything, there are 19 985 packages as today. But of course, you might need to program some routines if your problem is very specific.\n\n-   The packages are all located in a large repository call [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/web/packages/available_packages_by_name.html){target=\"_blank\"}\n\n# Let's jump into `R` {.center .sectionhead}\n\n## Editors and IDE {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Most famous IDE (Integrated Development Environment):\n    -   [RStudio](https://posit.co/download/rstudio-desktop/){target=\"_blank\"}\n    -   [Visual Studio Code](https://code.visualstudio.com/download)\n-   Not so famous but still powerful and [full open source:]{.blue}\n    -   [EMACS](https://www.gnu.org/software/emacs/download.html){target=\"_blank\"}\n    -   [VIM](https://www.vim.org/download.php){target=\"_blank\"}\n\n# Everything is an object, everything is a function {.center .sectionhead}\n\n## Types of objects {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Objects in `R` have properties and names, similar to real objects:\n    -   vectors\n    -   data frame\n    -   lists\n    -   arrays\n    -   functions\n-   These are just the most common objects in `R`. I'll explain a little bit of each one.\n\n## Vectors {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   It is the most basic object, it is the bones of `R`.\n\n-   In human language, they look like lists of elements. But, when mixed different type of data (letters mixed with numbers) things get messy:\n\n```{r, echo= TRUE}\n### Let's create a vector with names:\n\nrandomNames <- c(\"Randall\", \"Pablo\", \"Emma\")\n\nprint(randomNames) #You don't need to type print. This is for teaching purposes. \n```\n\nLet's see what happen's when I mix numbers and letters:\n\n```{r, echo= TRUE}\n\nnumbersNames <- c(\"one\",1, 2, \"two\", 3, \"three\")\nprint(numbersNames)\n```\n\n`R` coerces everything to be a string or character vector.\n\n-   You may also subset a vector by using `[]` as an index indicator\n\n```{r, echo=TRUE}\nnumbersNames[4]\n```\n\n## Data frames {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Data frame is the most useful type of object when you conduct data analysis.\n\n-   A data frame is several lists combined together, and it looks pretty much like a matrix or a spreadsheet:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nmtcars\n```\n\n##  {.smaller .scrollable background-opacity=\"0.5\"}\n\nLet's beautify the data frame output:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nlibrary(DT)\ndatatable(mtcars,\n          rownames = TRUE) \n```\n\n## Lists {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   Lists are flexible and easy to manipulate in `R`. You can combine different types of objects in a single list:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n### Let's create different types of objects\n\n### Data frame\n\ndata_1 <- data.frame(v1= rnorm(8),\n                     v2 = rnorm(8),\n                     v3 = rnorm(8))\n\n### Vector\n\nmoreNames <- c(\"Bob\", \"Paris\", \"Ana\")\n\n### Numeric vector\n\nnumericVector <- c(1,3,78,90)\n\n### We can group all these objects in a list\n\nlistOfObjects <- list(data_1,\n                      moreNames,\n                      numericVector)\nprint(listOfObjects)\n```\n\nIf you need to access one object in the list you may use its location plus `[[]]`:\n\n```{r, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\nlistOfObjects[[2]]\n```\n\n## Arrays {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   I don't use arrays in my code, but they are common in in `R` and other languages.\n\n-   An arrays is a multidimensional object, you can have multiple \"slices\" of information in on single object.\n\n-   It is similar to a multi-layer object.\n\n```{r, echo=TRUE}\narray(c(matrix(1:4,2,2)), dim=c(2,2,3))\n```\n\n## Functions {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   A function is a data object that requires input information, in return; it will give an output.\n\n-   I have already used several functions (e.g. `data.frame()`, `rnorm()`).\n\n-   Functions will always follow the following structure:\n\n```{r, echo=TRUE,eval=FALSE}\n\nmyFunction <- function(argument1, argument2, ...){ \n  \n  operation\n  \n  return()\n  \n  }\n\n```\n\n-   We can study the following case, where I created a function to estimate your age:\n\n```{r, echo=TRUE, eval=TRUE, include=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nestimateAge <- function(myBirthday) {\n  ### Function to check if year is a\n  ### leap year.\n  \n  leapyear <- function(year) {\n    return(((year %% 4 == 0) & (year %% 100 != 0)) | (year %% 400 == 0))\n  }\n  \n  ### Information necessary to compute age\n  myBirthday2 <- as.Date(myBirthday)\n  today <- Sys.Date()\n  year <- as.numeric(format(myBirthday2, \"%Y\"))\n  leapCheck <- leapyear(year)\n  \n  \n  if (leapCheck == TRUE) {\n    ## leap year\n    age <- difftime(today,\n                    myBirthday2 ,\n                    units = \"days\") / (365 + 1)\n    \n  } else {\n    ## No leap year\n    age <- difftime(today,\n                    myBirthday2,\n                    units = \"days\") / 365\n    \n  }\n  \n  message(\"Your age is\",\" \", age)\n}\n```\n\n-   My function `estimateAge()` requires only one argument `myBirthday`, that argument is passed to the computation inside the function to estimate the age.\n\n```{r, echo=TRUE, eval=TRUE, include=TRUE, message=TRUE}\n## Let's enter my date of birth\nestimateAge(\"1986-01-28\") \n```\n\n-   But don't worry, you don't have to compute age like I did. There is already a package that has all the tools to manipulate dates. It is the package `lubridate`.\n\n# More applications beyond statistics {.center .sectionhead}\n\n## ShinyApps {.smaller .scrollable background-opacity=\"0.5\"}\n\n-   [Watch Crime](https://shiny.posit.co/r/gallery/government-public-sector/crime-watch/){target=\"_blank\"}\n\n-   [Water quality dashboard](https://shiny.posit.co/r/gallery/government-public-sector/lake-profile-dashboard/){target=\"_blank\"}\n\n-   [Interactive data visualization](https://shiny.posit.co/r/gallery/interactive-visualizations/movie-explorer/){target=\"_blank\"}\n\n-   [Super Zips](https://shiny.posit.co/r/gallery/interactive-visualizations/superzip-example/){target=\"_blank\"}\n\n## Web Pages {.smaller .scrollable background-opacity=\"0.5\"}\n\n[- Andrew Heiss](https://www.andrewheiss.com/){target=\"_blank\"}\n\n[- Quantum Jitter](https://www.quantumjitter.com/project/){target=\"_blank\"}\n\n[- Ella Kaye](https://ellakaye.co.uk/){target=\"_blank\"}\n\n[- Books](https://r-pkgs.org/){target=\"_blank\"}\n\n[- University Course](https://lse-dsi.github.io/DS101/){target=\"_blank\"}\n\n## Scientific articles and reports in pdf {.smaller .scrollable background-opacity=\"0.5\"}\n\n[- Article](https://cmarquardt.github.io/quarto-simple-article/){target=\"_blank\"}\n\n[- Report](https://github.com/numbats/monash-quarto-report/blob/main/examples/template.pdf){target=\"_blank\"}\n\n## We can also add `R` code and run it in our websites\n\n<iframe src=\"https://blackhill86.github.io/mm2/practice2/practice2.html#practice2\" width=\"75%\" height=\"75%\" frameborder=\"0\" scrolling=\"yes\">\n\n</iframe>\n\n# We can paint happy plots in `R` {.center .sectionhead}\n\n![](bobross.jpg){fig-align=\"center\" width=\"350\"}\n\n## Happy penguins {.smaller .scrollable background-opacity=\"0.5\"}\n\n```{r, warning=FALSE, message=FALSE, error=FALSE, echo=TRUE}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n\n### The rule is to write the packages required by your code at the beginning\n## Packages loaded or called\nlibrary(jpeg)             ## reads pictures into R\nlibrary(patchwork)         ## more tools to add features in a plot\nlibrary(ggplot2)          ## creates plots\nlibrary(palmerpenguins)  ## This package has the penguin data\n\npicture <- \"penguins.jpg\"\nimg <- readJPEG(picture, native = TRUE)\n\n### Plotting the data using ggplot2\n\nggplot(penguins, aes(x = flipper_length_mm, \n                     y= body_mass_g,\n                     color = species)) +\n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\" ) + \n  theme_classic() +  \n  xlab(\"Flipper Length in milimeters\")+\n  ylab(\"Body Mass in grams\")+\n  inset_element(p = img,\n                left = 0.05,\n                bottom = 0.65,\n                right = 0.5,\n                top = 0.95)\n```\n\n## You can create art {.smaller .scrollable background-opacity=\"0.5\"}\n\n::: columns\n::: {.column width=\"40%\"}\n[Danielle Navarro's blog](https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/){target=\"_blank\"}\n:::\n\n::: {.column width=\"60%\"}\n[Basics on generative art](https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/){target=\"_blank\"}\n:::\n:::\n\n![](flametree.png){fig-align=\"center\"}\n\n```{=html}\n<!--# Add model summary: https://modelsummary.com/. Also add  https://blog.djnavarro.net/posts/2023-03-31_generative-art-with-grid/\nAnd generative art\nAdd anput packages and CRAN\n-->\n```\n## GIS and spatial data {.smaller .scrollable background-opacity=\"0.5\"}\n\n![](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/index_files/figure-html/numenor-map-correct-1.png){.absolute top=\"200\" left=\"10f\" width=\"500\" height=\"500\"}\n\n![](ring2.jpg){.absolute top=\"200\" right=\"0\" width=\"200\" height=\"200\"}\n\n[Making Middle Earth maps with R](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/){target=\"_blank\"}\n\n# Remember...\n\n[![](programmers-credo.jpg)](https://www.globalnerdy.com/2021/06/07/the-programmers-credo/)\n\n# Thank you for you attention! {.center .sectionhead}\n\n[[{{< fa brands mastodon >}}](https://fediscience.org/@montenegro)]{.blue} Follow me on Mastodon.\n\n{{< fa solid envelope beat >}} <a href=\"mailto:emontenegro1@csustan.edu\">emontenegro1\\@csustan.edu</a>\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["reveal-header"],"highlight-style":"dracula","from":"markdown+emoji","self-contained":false,"output-file":"gentleR.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"title":"Gentle introduction to `R`","title-slide-attributes":{"data-background-image":"stan_state_screen_5.png","data-background-opacity":"0.3"},"author":"Esteban Montenegro-Montenegro, PhD","institute":"Department of Psychology and Child Development","code-block-bg":true,"code-block-border-left":"#A41728","editor":"visual","logo":"stan-state-logo_nickname-full-color.png","footer":"[**Visit my website**](https://blackhill86.github.io/mm2/)","theme":["moon","customTheme.sass"],"header-logo":"warrior_head2.png","slideNumber":true,"previewLinks":true,"chalkboard":{"theme":"whiteboard"}}}},"projectFormats":["html"]}