{"title":"Data Visualization","markdown":{"yaml":{"title":"Data Visualization","subtitle":"The art of plotting","author":"Esteban Montenegro-Montenegro, PhD","institute":"Psychology and Child Development","title-slide-attributes":{"data-background-image":"stan_state_screen_1.png","data-background-opacity":"0.5"},"format":{"revealjs":{"theme":"simple","slide-number":true,"self-contained":false,"chalkboard":{"theme":"whiteboard"}}},"editor":"visual","bibliography":"references.bib","csl":"apa.csl"},"headingText":"Why figures are important?","headingAttr":{"id":"","classes":["smaller","scrollable"],"keyvalue":[["background-image","slide2.png"],["background-opacity","0.5"]]},"containsRefs":false,"markdown":"\n\n\n-   In statistics we can add tables and explain our results, but a good graph will always help you to tell your story better.\n\n-   It is a fast and easy way to comunicate several ideas in one single figure.\n\n-   If you plot your values in the right way, you don't need a lot of words to convey a message.\n\n-   We are limited by our senses and biases, that's why a plot helps to see the whole picture.\n\n## Why figures are important? II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   In this lecture we will study briefly the most common plots to diagnose data and detect values that are extreme or a little bit odd.\n\n-   I will also explain more about the package `ggplot2` in `R` and details on how `R` creates plots.\n\n## Creating a good graph {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Rules are always important:\n    -   Minimize chart or graph junk.\n    -   Plan out your chart before you start creating the final copy.\n    -   Say what you mean and mean what you say---no more and no less.\n    -   Label everything so nothing is left to the misunderstanding of the audience.\n    -   A graph should communicate only one idea.\\\n    -   Keep things balanced.\n    -   Maintain the scale in a graph.\n    -   Simple is best and less is more.\n    -   Limit the number of words you use.\n    -   A chart alone should convey what you want to say.\n\n## Let's talk about histograms {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n![](table1.png)\\\n- Let's imagine those are scores from a test.\n\n## Let's talk about histograms II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   From the previuos table we could create class intervals and then count how many values can be classified in each class:\n\n![](table2.png){fig-align=\"center\"} ![](table3.png){fig-align=\"center\"}\n\n## Let's talk about histograms III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n![](byhand.png){fig-align=\"center\"}\n\n## Let's talk about histograms IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Now, we can do it in `R`:\n\n```{r echo=TRUE}\n\nReading <- c(47, 2, 44, 41, 7, 6, 35, 38, 35, 36,\n            10, 11, 14, 14, 30, 30, 32, 33, 34, 32,\n            31, 31, 15, 16, 17, 16, 15, 19, 18, 16,\n            25, 25, 26, 26, 27, 29, 29, 28, 29, 27,\n            20, 21, 21, 21, 24, 24, 23, 20, 21, 20)\n\nhist(Reading)\n```\n\n-   We can change the number of class intervals:\n\n```{r echo=TRUE}\n\nhist(Reading, breaks = 5)\n\n```\n\n-   We can also add the Density Plot to the histogram:\n\n```{r}\n hist(Reading, probability = TRUE)\n lines(density(Reading))\n```\n\n## There are many ways to get to the same point {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   As always in life, there are several ways to solve a problem or to reprensent an idea.\n\n-   `R` has its own function to create plots, and probably you can recognize the function `hist()`, or the function `plot()`. In reality all the plots can be created only with `R` base functions.\n\n-   But there is another way to create plots, which is using the package `ggplot2`.\n\n-   As always, we need to check some documentation in [this link.](https://ggplot2.tidyverse.org/reference/)\n\n## `ggplot2()` package to create graphs {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `ggplot2()` is a powerful package capable of doing amazing graphs ready to be publish.\n-   The syntax that `ggplot` follows is known as \"grammar of graphics\". Sounds fancy?\n-   This package has some rules on how we can create plots.\n-   We are going to review the basic rules to create a plot.\n\n## `ggplot2()` package to create graphs II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `ggplot()` does something called \"mapping data\", this means that `ggplot` starts by linking your data with the graphics, it \"maps\" information into the picture.\n-   In order to create a \"map\" of the data we use the following code:\n\n```{r echo=TRUE}\nlibrary(ggplot2)\n\nrum <- read.csv(\"ruminationComplete.csv\")\n\nggplot(data = rum, aes(x=grade))\n\n\n```\n\n## `ggplot2()` package to create graphs II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   In the code, we are using a function named `aes()`, this stands for *aesthetics*. This means in simple English \"appearance\". The function `aes` is creating a layout fo your data. That's the first step.\n\n-   After creating the layout, similar to an empty canvas, we will add layers\n\n-   The layers are added by including the geometric form also known as `geoms` in `ggplot2` grammar.\n\n![](bobross.jpg){fig-align=\"right\"}\n\n## Time to add layers {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `geoms` are the layers to create bar plots, pie charts, and many more types of figures:\n    -   The `+` sign is the glue that keeps the `geom_bar()` layer along with the mapped data\n\n```{r echo = TRUE}\nggplot(data = rum, aes(x=grade)) + geom_bar()\n```\n\n## Time to add layers II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   You can also change the colors in other settings inside the layer:\n\n```{r echo = TRUE}\nggplot(data = rum, aes(x=grade)) + geom_bar(fill = \"blue\")\n```\n\n## Time to add layers II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   The labels and text are also considered another layer, there are functions for changing the text:\n-   Here we are changing the x-axis and y-axis labels.\n\n```{r echo = TRUE}\n#| code-line-numbers: \"3,4\"\nggplot(data = rum, aes(x=grade)) + \n  geom_bar(fill = \"blue\") +\n  ylab(\"Counts of Students\")+\n  xlab(\"Grade\")\n```\n\n## Time to add layers III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   There a good thing, `ggplot()` already has themes that you add to your plot, you don't need to manipulate the appearance by yourself, in this case I'm adding the theme `theme_classic()`.\n\n```{r echo = TRUE}\n#| code-line-numbers: \"6\"\nggplot(data = rum, aes(x=grade)) + \n  geom_bar(fill = \"blue\") +\n  ylab(\"Counts of Students\")+\n  xlab(\"Grade\") + \n  ggtitle(\"Bar Plot Example\")+\n  theme_classic()\n```\n\n## We are in good shape to continue drawing! {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Now, can resume were we left, we were talking about histograms.\n-   In `ggplot` there is geom for each plot, in this case we can use the `geom_hist()`:\n\n```{r echo = TRUE}\n#| code-line-numbers: \"2\"\nggplot(data = rum, aes(x=ageMonths)) + \n  geom_histogram(color=\"black\", fill=\"white\") +\n  ylab(\"Counts\")+\n  xlab(\"Age in Months\") + \n  ggtitle(\"Histogram of Age\")+\n  theme_classic()\n```\n\n## We are in good shape to continue drawing! II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   There is another type of plot called \"box plot\" (whisker plot) , this type of plot is useful to detect extreme cases or outliers.\n\n-   The line in the middle represents the median of the distribution, and the top line is the 75th percentile. The bottom line in the box represents the 25th percentile. See the anatomy of a bloxplot in this [link.](https://r-graph-gallery.com/boxplot.html)\n\n\n## We are in good shape to continue! {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n\n-Let's do it in base `R` first:\n\n```{r echo=TRUE, fig.height= 5, fig.width=7, fig.align='center'}\nboxplot(ageMonths ~ sex,\n        data=rum, \n        main=\"Box Plot of Age by Sex\",\n   xlab=\"Sex\", \n   ylab=\"Age in months\",\n   names = c(\"women\", \"men\"))\n```\n\n## We are in good shape to continue ! III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n\n- We can also do the same plot using `ggplot2` package, in this case we \nadd the `geom_boxplot()`\n\n\n```{r, echo=TRUE, fig.height= 4, fig.width= 6, fig.align='center'}\n#| code-line-numbers: \"3\"\nggplot(data = rum, \n       aes(x=factor(sex), y=ageMonths)) + \n  geom_boxplot(fill = \"orange\") +\n  xlab(\"Sex\") +\n  ylab(\"Age in Months\")+\n  ggtitle(\"Box Plot of Age by Sex\") +\n  scale_x_discrete(labels=c(\"Women\", \"Men\"))+\n  theme_classic()\n\n```\n## We are in good shape to continue ! IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Line plots are great for representing longitudinal data:\n\n::: panel-tabset\n## Code\n```{r echo=TRUE, eval=FALSE, fig.height= 4, fig.width= 6, fig.align='center'}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n## Plot \n```{r echo=FALSE}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n:::\n\n\n\n\n## We are in good shape to continue ! IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Line plots are great for representing longitudinal data, now let's do it \nwith `ggplot2`:\n\n::: panel-tabset\n## Code\n```{r echo=TRUE, eval=FALSE, fig.height= 4, fig.width= 6, fig.align='center'}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n## Plot \n```{r echo=FALSE}\n#| fig-cap: \"Note: Years in the X-axis is represented in 5 years interval\"\nlibrary(tidyr)\nlibrary(dplyr)\n\n## Expectancy of life at birth from the World Bank webpage\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n   pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")%>%\n   mutate(lifeExpect = as.numeric(gsub(\"X\", \"\", year)))\n\n\nggplot(data = life, aes(x= lifeExpect, y = lifeYears)) +\n  geom_line(color = \"blue\") + \n  xlab(\"Year\") +\n  ylab(\"Life expectancy at birth\")+\n  ggtitle(\"Life expectancy from 1960 to 2020 in Costa Rica\") +\n  scale_x_continuous(breaks = seq(1960,2020, by = 5)) +\n  scale_y_continuous(limits = c(60,85))+\n  theme_classic()\n\n\n\n```\n:::\n\n## QQ-plots: Quantile-Quantile plots {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Remember that we studied how to estimate the percentiles of a continous\ndistribution? Now we will apply your knowledge to plots.\n\n- Quantile-Quantile plots will take the observed quantiles (or percentiles) from\nyour observed data (lower case) and compare those quantiles versus a theoretical\ndistribution.\n\n- Many times we want to test if our observed data comes from a normally\ndistributed process, so we can take the theoretical normal quantiles and plot them\nagainst our observed quantiles. \n\n\n- Let's see how life expectancy in Costa Rica looks like compare to a normally\ndistributed process:\n\n::: panel-tabset\n\n## Code\n```{r, echo = TRUE, eval=FALSE}\nqqnorm(life$lifeYears, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Life Expentancy in Costa Rica\")\n\nqqline(life$lifeYears, col = \"steelblue\", lwd = 2)\n```\n## Plot\n\n```{r echo=FALSE}\nqqnorm(life$lifeYears, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Life Expentancy in Costa Rica\")\n\nqqline(life$lifeYears, col = \"steelblue\", lwd = 2)\n```\n \n \n::: \n\n\n- If all the dots are align to the straight line we can assume the\nprocess that produces the data is normally distributed, in this case;\nwhat do you think?\n\n\n\n```{r, echo = TRUE}\n\nset.seed(1236)\n\ngeneratedValues <- rnorm(1000, mean = 0, sd = 1)\n\nqqnorm(generatedValues, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Simulated data from a normal distribution\")\n\nqqline(generatedValues, \n       col = \"steelblue\", \n       lwd = 2)\n```\n- The plot above shows what the QQ plot looks like when your observed data come\nfrom a normally distributed process. \n\n\n## References {background-image=\"slide2.png\" background-opacity=\"0.5\"}\n","srcMarkdownNoYaml":"\n\n## Why figures are important? {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   In statistics we can add tables and explain our results, but a good graph will always help you to tell your story better.\n\n-   It is a fast and easy way to comunicate several ideas in one single figure.\n\n-   If you plot your values in the right way, you don't need a lot of words to convey a message.\n\n-   We are limited by our senses and biases, that's why a plot helps to see the whole picture.\n\n## Why figures are important? II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   In this lecture we will study briefly the most common plots to diagnose data and detect values that are extreme or a little bit odd.\n\n-   I will also explain more about the package `ggplot2` in `R` and details on how `R` creates plots.\n\n## Creating a good graph {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Rules are always important:\n    -   Minimize chart or graph junk.\n    -   Plan out your chart before you start creating the final copy.\n    -   Say what you mean and mean what you say---no more and no less.\n    -   Label everything so nothing is left to the misunderstanding of the audience.\n    -   A graph should communicate only one idea.\\\n    -   Keep things balanced.\n    -   Maintain the scale in a graph.\n    -   Simple is best and less is more.\n    -   Limit the number of words you use.\n    -   A chart alone should convey what you want to say.\n\n## Let's talk about histograms {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n![](table1.png)\\\n- Let's imagine those are scores from a test.\n\n## Let's talk about histograms II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   From the previuos table we could create class intervals and then count how many values can be classified in each class:\n\n![](table2.png){fig-align=\"center\"} ![](table3.png){fig-align=\"center\"}\n\n## Let's talk about histograms III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n![](byhand.png){fig-align=\"center\"}\n\n## Let's talk about histograms IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Now, we can do it in `R`:\n\n```{r echo=TRUE}\n\nReading <- c(47, 2, 44, 41, 7, 6, 35, 38, 35, 36,\n            10, 11, 14, 14, 30, 30, 32, 33, 34, 32,\n            31, 31, 15, 16, 17, 16, 15, 19, 18, 16,\n            25, 25, 26, 26, 27, 29, 29, 28, 29, 27,\n            20, 21, 21, 21, 24, 24, 23, 20, 21, 20)\n\nhist(Reading)\n```\n\n-   We can change the number of class intervals:\n\n```{r echo=TRUE}\n\nhist(Reading, breaks = 5)\n\n```\n\n-   We can also add the Density Plot to the histogram:\n\n```{r}\n hist(Reading, probability = TRUE)\n lines(density(Reading))\n```\n\n## There are many ways to get to the same point {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   As always in life, there are several ways to solve a problem or to reprensent an idea.\n\n-   `R` has its own function to create plots, and probably you can recognize the function `hist()`, or the function `plot()`. In reality all the plots can be created only with `R` base functions.\n\n-   But there is another way to create plots, which is using the package `ggplot2`.\n\n-   As always, we need to check some documentation in [this link.](https://ggplot2.tidyverse.org/reference/)\n\n## `ggplot2()` package to create graphs {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `ggplot2()` is a powerful package capable of doing amazing graphs ready to be publish.\n-   The syntax that `ggplot` follows is known as \"grammar of graphics\". Sounds fancy?\n-   This package has some rules on how we can create plots.\n-   We are going to review the basic rules to create a plot.\n\n## `ggplot2()` package to create graphs II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `ggplot()` does something called \"mapping data\", this means that `ggplot` starts by linking your data with the graphics, it \"maps\" information into the picture.\n-   In order to create a \"map\" of the data we use the following code:\n\n```{r echo=TRUE}\nlibrary(ggplot2)\n\nrum <- read.csv(\"ruminationComplete.csv\")\n\nggplot(data = rum, aes(x=grade))\n\n\n```\n\n## `ggplot2()` package to create graphs II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   In the code, we are using a function named `aes()`, this stands for *aesthetics*. This means in simple English \"appearance\". The function `aes` is creating a layout fo your data. That's the first step.\n\n-   After creating the layout, similar to an empty canvas, we will add layers\n\n-   The layers are added by including the geometric form also known as `geoms` in `ggplot2` grammar.\n\n![](bobross.jpg){fig-align=\"right\"}\n\n## Time to add layers {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   `geoms` are the layers to create bar plots, pie charts, and many more types of figures:\n    -   The `+` sign is the glue that keeps the `geom_bar()` layer along with the mapped data\n\n```{r echo = TRUE}\nggplot(data = rum, aes(x=grade)) + geom_bar()\n```\n\n## Time to add layers II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   You can also change the colors in other settings inside the layer:\n\n```{r echo = TRUE}\nggplot(data = rum, aes(x=grade)) + geom_bar(fill = \"blue\")\n```\n\n## Time to add layers II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   The labels and text are also considered another layer, there are functions for changing the text:\n-   Here we are changing the x-axis and y-axis labels.\n\n```{r echo = TRUE}\n#| code-line-numbers: \"3,4\"\nggplot(data = rum, aes(x=grade)) + \n  geom_bar(fill = \"blue\") +\n  ylab(\"Counts of Students\")+\n  xlab(\"Grade\")\n```\n\n## Time to add layers III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   There a good thing, `ggplot()` already has themes that you add to your plot, you don't need to manipulate the appearance by yourself, in this case I'm adding the theme `theme_classic()`.\n\n```{r echo = TRUE}\n#| code-line-numbers: \"6\"\nggplot(data = rum, aes(x=grade)) + \n  geom_bar(fill = \"blue\") +\n  ylab(\"Counts of Students\")+\n  xlab(\"Grade\") + \n  ggtitle(\"Bar Plot Example\")+\n  theme_classic()\n```\n\n## We are in good shape to continue drawing! {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   Now, can resume were we left, we were talking about histograms.\n-   In `ggplot` there is geom for each plot, in this case we can use the `geom_hist()`:\n\n```{r echo = TRUE}\n#| code-line-numbers: \"2\"\nggplot(data = rum, aes(x=ageMonths)) + \n  geom_histogram(color=\"black\", fill=\"white\") +\n  ylab(\"Counts\")+\n  xlab(\"Age in Months\") + \n  ggtitle(\"Histogram of Age\")+\n  theme_classic()\n```\n\n## We are in good shape to continue drawing! II {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n-   There is another type of plot called \"box plot\" (whisker plot) , this type of plot is useful to detect extreme cases or outliers.\n\n-   The line in the middle represents the median of the distribution, and the top line is the 75th percentile. The bottom line in the box represents the 25th percentile. See the anatomy of a bloxplot in this [link.](https://r-graph-gallery.com/boxplot.html)\n\n\n## We are in good shape to continue! {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n\n-Let's do it in base `R` first:\n\n```{r echo=TRUE, fig.height= 5, fig.width=7, fig.align='center'}\nboxplot(ageMonths ~ sex,\n        data=rum, \n        main=\"Box Plot of Age by Sex\",\n   xlab=\"Sex\", \n   ylab=\"Age in months\",\n   names = c(\"women\", \"men\"))\n```\n\n## We are in good shape to continue ! III {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n\n- We can also do the same plot using `ggplot2` package, in this case we \nadd the `geom_boxplot()`\n\n\n```{r, echo=TRUE, fig.height= 4, fig.width= 6, fig.align='center'}\n#| code-line-numbers: \"3\"\nggplot(data = rum, \n       aes(x=factor(sex), y=ageMonths)) + \n  geom_boxplot(fill = \"orange\") +\n  xlab(\"Sex\") +\n  ylab(\"Age in Months\")+\n  ggtitle(\"Box Plot of Age by Sex\") +\n  scale_x_discrete(labels=c(\"Women\", \"Men\"))+\n  theme_classic()\n\n```\n## We are in good shape to continue ! IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Line plots are great for representing longitudinal data:\n\n::: panel-tabset\n## Code\n```{r echo=TRUE, eval=FALSE, fig.height= 4, fig.width= 6, fig.align='center'}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n## Plot \n```{r echo=FALSE}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n:::\n\n\n\n\n## We are in good shape to continue ! IV {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Line plots are great for representing longitudinal data, now let's do it \nwith `ggplot2`:\n\n::: panel-tabset\n## Code\n```{r echo=TRUE, eval=FALSE, fig.height= 4, fig.width= 6, fig.align='center'}\nlibrary(tidyr)\nlibrary(dplyr)\n## Expectancy of life at birth from the World Bank\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n  pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")\n\nlifeExpect <- as.numeric(gsub(\"X\", \"\", life$year)) \n\nplot(x = lifeExpect,\n     y = life$lifeYears, \n     type = \"l\",\n     xlab = \"Year\",\n     ylab = \"Life expectancy at birth\",\n     main = \"Life expectancy from 1960 to 2020 in Costa Rica\",\n     col = \"blue\",\n     lwd = 3)\n\n```\n## Plot \n```{r echo=FALSE}\n#| fig-cap: \"Note: Years in the X-axis is represented in 5 years interval\"\nlibrary(tidyr)\nlibrary(dplyr)\n\n## Expectancy of life at birth from the World Bank webpage\nlife <- read.csv(\"lifeExpect.csv\") %>% \n  filter(Country.Name == \"Costa Rica\") %>%\n  select(X1960:X2020) %>%\n   pivot_longer(everything(), \n               names_to = \"year\", \n               values_to = \"lifeYears\")%>%\n   mutate(lifeExpect = as.numeric(gsub(\"X\", \"\", year)))\n\n\nggplot(data = life, aes(x= lifeExpect, y = lifeYears)) +\n  geom_line(color = \"blue\") + \n  xlab(\"Year\") +\n  ylab(\"Life expectancy at birth\")+\n  ggtitle(\"Life expectancy from 1960 to 2020 in Costa Rica\") +\n  scale_x_continuous(breaks = seq(1960,2020, by = 5)) +\n  scale_y_continuous(limits = c(60,85))+\n  theme_classic()\n\n\n\n```\n:::\n\n## QQ-plots: Quantile-Quantile plots {.smaller .scrollable background-image=\"slide2.png\" background-opacity=\"0.5\"}\n\n- Remember that we studied how to estimate the percentiles of a continous\ndistribution? Now we will apply your knowledge to plots.\n\n- Quantile-Quantile plots will take the observed quantiles (or percentiles) from\nyour observed data (lower case) and compare those quantiles versus a theoretical\ndistribution.\n\n- Many times we want to test if our observed data comes from a normally\ndistributed process, so we can take the theoretical normal quantiles and plot them\nagainst our observed quantiles. \n\n\n- Let's see how life expectancy in Costa Rica looks like compare to a normally\ndistributed process:\n\n::: panel-tabset\n\n## Code\n```{r, echo = TRUE, eval=FALSE}\nqqnorm(life$lifeYears, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Life Expentancy in Costa Rica\")\n\nqqline(life$lifeYears, col = \"steelblue\", lwd = 2)\n```\n## Plot\n\n```{r echo=FALSE}\nqqnorm(life$lifeYears, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Life Expentancy in Costa Rica\")\n\nqqline(life$lifeYears, col = \"steelblue\", lwd = 2)\n```\n \n \n::: \n\n\n- If all the dots are align to the straight line we can assume the\nprocess that produces the data is normally distributed, in this case;\nwhat do you think?\n\n\n\n```{r, echo = TRUE}\n\nset.seed(1236)\n\ngeneratedValues <- rnorm(1000, mean = 0, sd = 1)\n\nqqnorm(generatedValues, \n       pch = 1, \n       frame = TRUE,\n        main = \"Normal Q-Q Plot for Simulated data from a normal distribution\")\n\nqqline(generatedValues, \n       col = \"steelblue\", \n       lwd = 2)\n```\n- The plot above shows what the QQ plot looks like when your observed data come\nfrom a normally distributed process. \n\n\n## References {background-image=\"slide2.png\" background-opacity=\"0.5\"}\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","self-contained":false,"output-file":"visualizations.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"title":"Data Visualization","subtitle":"The art of plotting","author":"Esteban Montenegro-Montenegro, PhD","institute":"Psychology and Child Development","title-slide-attributes":{"data-background-image":"stan_state_screen_1.png","data-background-opacity":"0.5"},"editor":"visual","bibliography":["references.bib"],"csl":"apa.csl","theme":"simple","slideNumber":true,"chalkboard":{"theme":"whiteboard"}}}},"projectFormats":["html"]}